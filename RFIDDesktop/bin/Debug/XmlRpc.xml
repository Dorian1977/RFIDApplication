<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmlRpc</name>
    </assembly>
    <members>
        <member name="T:XmlRpc.ConnectionDroppedUnexpectedlyEventHandler">
            <summary>
            EventHandler for the ConnectionDroppedUnexpectedly event.
            </summary>
            <param name="sender">The xml rpc client of which the connection dropped.</param>
            <param name="cause">The Exception that caused the connection to be dropped.</param>
        </member>
        <member name="T:XmlRpc.MethodResponseEventHandler">
            <summary>
            EventHandler for the MethodResponse event.
            </summary>
            <param name="sender">The xml rpc client that received the method response.</param>
            <param name="requestHandle">The handle of the method call that the response is for.</param>
            <param name="methodResponse">The xml formatted content of the method response.</param>
        </member>
        <member name="T:XmlRpc.ServerCallbackEventHandler">
            <summary>
            EventHandler for the ServerCallback event.
            </summary>
            <param name="sender">The xml rpc client that reveived the server callback.</param>
            <param name="serverCallback">The xml formatted content of the method response.</param>
        </member>
        <member name="T:XmlRpc.IXmlRpcClient">
            <summary>
            Interface for XmlRpc Clients.
            </summary>
        </member>
        <member name="M:XmlRpc.IXmlRpcClient.EndReceive">
            <summary>
            Stop reading data from the interface connection.
            </summary>
        </member>
        <member name="M:XmlRpc.IXmlRpcClient.SendRequest(System.String)">
            <summary>
            Send an Xml formatted request to the XmlRpc interface.
            </summary>
            <param name="request">The xml formatted request.</param>
            <returns>The handle associated with the request.</returns>
        </member>
        <member name="M:XmlRpc.IXmlRpcClient.StartReceive">
            <summary>
            Start reading data from the interface connection.
            </summary>
        </member>
        <member name="P:XmlRpc.IXmlRpcClient.Name">
            <summary>
            Gets client's name.
            </summary>
        </member>
        <member name="E:XmlRpc.IXmlRpcClient.ConnectionDroppedUnexpectedly">
            <summary>
            Fires when the connection drops unexpectedly.
            </summary>
        </member>
        <member name="E:XmlRpc.IXmlRpcClient.MethodResponse">
            <summary>
            Fires when a MethodResponse is received.
            </summary>
        </member>
        <member name="E:XmlRpc.IXmlRpcClient.ServerCallback">
            <summary>
            Fires when a ServerCallback is received.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.SystemListMethods">
            <summary>
            Represents a call to the system.listMethods method.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`2">
            <summary>
            Abstract base class for method calls that don't have parameters and the base classes for those that do.
            </summary>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`2.fault">
            <summary>
            Backing field for the Fault property.
            </summary>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`2.returned">
            <summary>
            Backing field for the Returned property.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.GenerateCallXml">
            <summary>
            Generates the Xml to send to the server for executing the method call.
            </summary>
            <returns>An XElement containing the method call.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.GenerateResponseXml">
            <summary>
            Generates an XElement storing the information for the method response.
            </summary>
            <returns>The generated XElement.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.ParseCallXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the parameters of this method call with the information contained in the XElement.
            </summary>
            <param name="xElement">The method call element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.ParseResponseXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the Returned or Fault information from the given method response data.
            <para/>
            This makes IsCompleted true and the method call has to be Reset before using this again.
            </summary>
            <param name="xElement">The XElement containing the method response.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.ToString">
            <summary>
            Returns a string representation of the method call.
            </summary>
            <returns>A string representing the method call.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.isValidParamElement(System.Xml.Linq.XElement)">
            <summary>
            Checks whether a given XElement is a valid param element.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>Whether the given XElement is a valid param element.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.makeParamElement``1(XmlRpc.Types.XmlRpcType{``0})">
            <summary>
            Creates a param-Element with the given XmlRpcType's value as content.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The XmlRpcType to be wrapped.</param>
            <returns>A param-Element containing the value as content.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.parseCallParamXml``1(System.Xml.Linq.XElement,XmlRpc.Types.XmlRpcType{``0})">
            <summary>
            Fills the parameter properties of this method call with the information contained in the XElement.
            </summary>
            <typeparam name="T">The XmlRpcType of the parameter.</typeparam>
            <param name="paramsElement">The XElement containing the information.</param>
            <param name="param">The parameter.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.generateCallParamsXml">
            <summary>
            Generates Xml containing the call parameter data.
            <para/>
            To be overridden by classes that add more call parameters to add theirs.
            </summary>
            <returns>An XElement containing the call parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`2.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the parameter properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Methods.XmlRpcMethodCall`2.Fault">
            <summary>
            Gets the fault information.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.XmlRpcMethodCall`2.HadFault">
            <summary>
            Gets whether there was a fault with the method call or not.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.XmlRpcMethodCall`2.MethodName">
            <summary>
            Gets the name of the method this call is for.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.XmlRpcMethodCall`2.ReturnValue">
            <summary>
            Gets the return value of the call.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.SystemListMethods.MethodName">
            <summary>
            Gets the name of the method this call is for.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.SystemMethodHelp">
            <summary>
            Represents a call to the system.methodHelp method.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`4">
            <summary>
            Abstract base class for method calls that have one parameter and the base classes for those that have more.
            </summary>
            <typeparam name="TParam1">The XmlRpcType of the parameter.</typeparam>
            <typeparam name="TParam1Base">The type of the parameter value.</typeparam>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`4.param1">
            <summary>
            Field for the first parameter.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`4.#ctor(`1)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`4"/> class with the given value for the parameter.
            </summary>
            <param name="param1">The parameter's value.</param>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`4.generateCallParamsXml">
            <summary>
            Generates Xml containing the parameter data.
            <para/>
            To be overridden by classes that add more parameters to add theirs.
            </summary>
            <returns>An XElement containing the parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`4.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Methods.SystemMethodHelp.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Methods.SystemMethodHelp"/> class with the given target method name.
            </summary>
            <param name="targetMethod">The name of the method that the help is wanted for.</param>
        </member>
        <member name="P:XmlRpc.Methods.SystemMethodHelp.MethodName">
            <summary>
            Gets the name of the method this call is for.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.SystemMethodHelp.TargetMethod">
            <summary>
            Gets or sets the name of the method that the help is wanted for.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.SystemMethodSignature">
            <summary>
            Represents a call to the system.methodSignature method.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.SystemMethodSignature.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Methods.SystemMethodSignature"/> class with the given target method name.
            </summary>
            <param name="targetMethod">The name of the method that the signatures are wanted for.</param>
        </member>
        <member name="P:XmlRpc.Methods.SystemMethodSignature.MethodName">
            <summary>
            Gets or sets the login used for authentication.
            </summary>
        </member>
        <member name="P:XmlRpc.Methods.SystemMethodSignature.TargetMethod">
            <summary>
            Gets or sets the name of the method that the signatures are wanted for.
            </summary>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`6">
            <summary>
            Abstract base class for method calls that have two parameters and the base classes for those that have more.
            </summary>
            <typeparam name="TParam1">The XmlRpcType of the first parameter.</typeparam>
            <typeparam name="TParam1Base">The type of the first parameter value.</typeparam>
            <typeparam name="TParam2">The XmlRpcType of the second parameter.</typeparam>
            <typeparam name="TParam2Base">The type of the second parameter value.</typeparam>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`6.param2">
            <summary>
            Field for the second parameter.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`6.#ctor(`1,`3)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`6"/>
            class with the given values for the parameters.
            </summary>
            <param name="param1">The first parameter's value.</param>
            <param name="param2">The second parameter's value.</param>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`6.generateCallParamsXml">
            <summary>
            Generates Xml containing the parameter data.
            <para/>
            To be overridden by classes that add more parameters to add theirs.
            </summary>
            <returns>An XElement containing the parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`6.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`8">
            <summary>
            Abstract base class for method calls that have three parameters and the base classes for those that have more.
            </summary>
            <typeparam name="TParam1">The XmlRpcType of the first parameter.</typeparam>
            <typeparam name="TParam1Base">The type of the first parameter value.</typeparam>
            <typeparam name="TParam2">The XmlRpcType of the second parameter.</typeparam>
            <typeparam name="TParam2Base">The type of the second parameter value.</typeparam>
            <typeparam name="TParam3">The XmlRpcType of the third parameter.</typeparam>
            <typeparam name="TParam3Base">The type of the third parameter value.</typeparam>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`8.param3">
            <summary>
            Field for the third parameter.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`8.#ctor(`1,`3,`5)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`8"/>
            class with the given values for the parameters.
            </summary>
            <param name="param1">The first parameter's value.</param>
            <param name="param2">The second parameter's value.</param>
            <param name="param3">The third parameter's value.</param>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`8.generateCallParamsXml">
            <summary>
            Generates Xml containing the parameter data.
            <para/>
            To be overridden by classes that add more parameters to add theirs.
            </summary>
            <returns>An XElement containing the parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`8.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`10">
            <summary>
            Abstract base class for method calls that have fourth parameters and the base classes for those that have more.
            </summary>
            <typeparam name="TParam1">The XmlRpcType of the first parameter.</typeparam>
            <typeparam name="TParam1Base">The type of the first parameter value.</typeparam>
            <typeparam name="TParam2">The XmlRpcType of the second parameter.</typeparam>
            <typeparam name="TParam2Base">The type of the second parameter value.</typeparam>
            <typeparam name="TParam3">The XmlRpcType of the third parameter.</typeparam>
            <typeparam name="TParam3Base">The type of the third parameter value.</typeparam>
            <typeparam name="TParam4">The XmlRpcType of the fourth parameter.</typeparam>
            <typeparam name="TParam4Base">The type of the fourth parameter value.</typeparam>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`10.param4">
            <summary>
            Field for the fourth parameter.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`10.#ctor(`1,`3,`5,`7)">
            <summary>
            Creates a new instance of the
            <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`10"/>
            class with the given values for the parameters.
            </summary>
            <param name="param1">The first parameter's value.</param>
            <param name="param2">The second parameter's value.</param>
            <param name="param3">The third parameter's value.</param>
            <param name="param4">The fourth parameter's value.</param>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`10.generateCallParamsXml">
            <summary>
            Generates Xml containing the parameter data.
            <para/>
            To be overridden by classes that add more parameters to add theirs.
            </summary>
            <returns>An XElement containing the parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`10.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="T:XmlRpc.Methods.XmlRpcMethodCall`12">
            <summary>
            Abstract base class for method calls that have fourth parameters and the base classes for those that have more.
            </summary>
            <typeparam name="TParam1">The XmlRpcType of the first parameter.</typeparam>
            <typeparam name="TParam1Base">The type of the first parameter value.</typeparam>
            <typeparam name="TParam2">The XmlRpcType of the second parameter.</typeparam>
            <typeparam name="TParam2Base">The type of the second parameter value.</typeparam>
            <typeparam name="TParam3">The XmlRpcType of the third parameter.</typeparam>
            <typeparam name="TParam3Base">The type of the third parameter value.</typeparam>
            <typeparam name="TParam4">The XmlRpcType of the fourth parameter.</typeparam>
            <typeparam name="TParam4Base">The type of the fourth parameter value.</typeparam>
            <typeparam name="TParam5">The XmlRpcType of the fifth parameter.</typeparam>
            <typeparam name="TParam5Base">The type of the fifth parameter value.</typeparam>
            <typeparam name="TReturn">The returned XmlRpcType.</typeparam>
            <typeparam name="TReturnBase">The type of the return value.</typeparam>
        </member>
        <member name="F:XmlRpc.Methods.XmlRpcMethodCall`12.param5">
            <summary>
            Field for the fourth parameter.
            </summary>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`12.#ctor(`1,`3,`5,`7,`9)">
            <summary>
            Creates a new instance of the
            <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`12"/>
            class with the given values for the parameters.
            </summary>
            <param name="param1">The first parameter's value.</param>
            <param name="param2">The second parameter's value.</param>
            <param name="param3">The third parameter's value.</param>
            <param name="param4">The fourth parameter's value.</param>
            <param name="param5">The fith parameter's value.</param>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`12.generateCallParamsXml">
            <summary>
            Generates Xml containing the parameter data.
            <para/>
            To be overridden by classes that add more parameters to add theirs.
            </summary>
            <returns>An XElement containing the parameter data.</returns>
        </member>
        <member name="M:XmlRpc.Methods.XmlRpcMethodCall`12.parseCallParamsXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this method call with the information contained in the XElement.
            </summary>
            <param name="paramsElement">The params element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="T:XmlRpc.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:XmlRpc.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:XmlRpc.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:XmlRpc.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:XmlRpc.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:XmlRpc.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:XmlRpc.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:XmlRpc.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:XmlRpc.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:XmlRpc.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:XmlRpc.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:XmlRpc.Testing.MethodCalls">
            <summary>
            Contains convenience methods to test MethodCalls.
            </summary>
        </member>
        <member name="M:XmlRpc.Testing.MethodCalls.AreRoundTripSave(System.Action{System.Boolean,System.Type,System.String},System.Reflection.Assembly[])">
            <summary>
            Takes an Assembly and an action that is performed on the result of the round-trip check, and checks every <see cref="T:XmlRpc.Methods.XmlRpcMethodCall`2"/> derivative
            that doesn't have generic parameters and isn't abstract for round-trip safety.
            <para/>
            This assumes that all the XmlRpcType&lt;&gt; that are supposed to be checked, are private fields of the class, and are the only things that are serialized.
            </summary>
            <param name="assemblies">The assemblies to check the types in.</param>
            <param name="assertIsTrue">
            The action that is performed on the results of the round-trip check.
            First parameter is whether it was successful, second is the Type of the tested MethodCall, third is the reason it failed (if it did).
            </param>
        </member>
        <member name="T:XmlRpc.Testing.Structs">
            <summary>
            Contains convenience methods to test Structs.
            </summary>
        </member>
        <member name="M:XmlRpc.Testing.Structs.AreRoundTripSave(System.Action{System.Boolean,System.Type,System.String},System.Reflection.Assembly[])">
            <summary>
            Takes an Assembly and an action that is performed on the result of the round-trip check, and checks every <see cref="T:XmlRpc.Types.Structs.BaseStruct"/> derivative
            that doesn't have generic parameters and isn't abstract for round-trip safety.
            <para/>
            This assumes that all the XmlRpcType&lt;&gt; that are supposed to be checked, are private fields of the class, and are the only things that is serialized.
            </summary>
            <param name="assemblies">The assemblies to check the types in.</param>
            <param name="assertIsTrue">
            The action that is performed on the results of the round-trip check.
            First parameter is whether it was successful, second is the Type of the tested Struct, third is the reason it failed (if it did).
            </param>
        </member>
        <member name="T:XmlRpc.Types.Structs.BaseStruct">
            <summary>
            Abstract base class for all xml rpc structs.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.GenerateXml">
            <summary>
            Generates an XElement storing the information in this struct.
            </summary>
            <returns>The generated XElement.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.ParseXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the properties of this struct with the information contained in the XElement.
            </summary>
            <param name="xElement">The struct element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.ToString">
            <summary>
            Returns a string representation of the struct.
            </summary>
            <returns>A string representation of the struct.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.getMemberName(System.Xml.Linq.XElement)">
            <summary>
            Gets the name of the member from a member element.
            </summary>
            <param name="member">The member element to get the name from.</param>
            <returns>The name of the member.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.getMemberValueElement(System.Xml.Linq.XElement)">
            <summary>
            Gets the value element of a member from a member element.
            </summary>
            <param name="member">The member element to get the value from.</param>
            <returns>The value element of the member or null if not a valid member.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.isStructElement(System.Xml.Linq.XElement)">
            <summary>
            Checks whether the given XElement has the local name corresponding to a struct element.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>Whether it has the correct local name.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.isValidMemberElement(System.Xml.Linq.XElement)">
            <summary>
            Checks if an element is a valid member element.
            </summary>
            <param name="member">The element to check.</param>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.makeMemberElement``1(System.String,XmlRpc.Types.XmlRpcType{``0})">
            <summary>
            Creates a member element from the name and the value content element.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="value">The value XmlRpcType.</param>
            <typeparam name="T">The XmlRpType's base type.</typeparam>
            <returns>The member element with the given name and value content.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the property of this struct that has the correct name with the information contained in the member-XElement.
            </summary>
            <param name="member">The member element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.BaseStruct.makeNameXElement(System.String)">
            <summary>
            Creates a name element with the given content.
            </summary>
            <param name="name">The value of the name element.</param>
            <returns>The name element with the given value.</returns>
        </member>
        <member name="T:XmlRpc.Types.Structs.FaultStruct">
            <summary>
            Gets the struct returned when a method call has a fault.
            </summary>
        </member>
        <member name="F:XmlRpc.Types.Structs.FaultStruct.faultCode">
            <summary>
            Backing field for the FaultCode property.
            </summary>
        </member>
        <member name="F:XmlRpc.Types.Structs.FaultStruct.faultString">
            <summary>
            Backing field for the FaultString property.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.Structs.FaultStruct.GenerateXml">
            <summary>
            Generates an XElement storing the information in this struct.
            </summary>
            <returns>The generated XElement.</returns>
        </member>
        <member name="M:XmlRpc.Types.Structs.FaultStruct.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the property of this struct that has the correct name with the information contained in the member-XElement.
            </summary>
            <param name="member">The member element storing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.Structs.FaultStruct.FaultCode">
            <summary>
            Gets the fault code.
            </summary>
        </member>
        <member name="P:XmlRpc.Types.Structs.FaultStruct.FaultString">
            <summary>
            Gets the description of the fault.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcArray`2">
            <summary>
            Represents an XmlRpcType containing an array of XmlRpcTypes that derive from TBase.
            For example for a string array, TArray would be XmlRpcString and TBase would be string.
            TBase enforces TArray. TArray has to be XmlRpcString because it derives from XmlRpcType&lt;string&gt;
            </summary>
            <typeparam name="TArray">TArray[] is the Type of the Value property.</typeparam>
            <typeparam name="TArrayBase">TBase is the base type that TArray has to derive from.</typeparam>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcType`1">
            <summary>
            Abstract base class for all XmlRpcTypes.
            </summary>
            <typeparam name="TValue">The Type of the Value property.</typeparam>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcType`1"/> class with Value set to the default value for TValue.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcType`1"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.GenerateXml">
            <summary>
            Generates a value-XElement containing the information stored in this XmlRpc type.
            <para/>
            Default implementation creates an XElement with the ContentElementName and the content from Value, and wraps it in a value element.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.ParseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.ToString">
            <summary>
            Returns a string representation of the Type.
            </summary>
            <returns>A string representation of the Type.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.isValueElement(System.Xml.Linq.XElement)">
            <summary>
            Checks whether the given XElement has the local name corresponding to a value element.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>Whether it has the correct local name.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.hasValueCorrectContent(System.Xml.Linq.XElement)">
            <summary>
            Checks whether the value-XElement has content fitting with this XmlRpc type.
            <para/>
            Can be overridden if a single child element with the correct name is not the desired check.
            Validity of the XElement will have already been verified.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>Whether it has fitting content or not.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcType`1.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            <para/>
            Gets called by the ParseXml method to do the actual parsing. Validity of the XElement will have already been verified.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcType`1.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcType`1.Value">
            <summary>
            Gets or sets the Value contained by this XmlRpcType.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcArray`2.#ctor(`0[])">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcArray`2"/> class with the given value.
            </summary>
            <param name="value">The array encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcArray`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcArray`2"/> class with a zero-length TArray array for the Value property.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcArray`2.GenerateXml">
            <summary>
            Generates an XElement from the Value. Default implementation creates an XElement with the ElementName and the content from Value.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcArray`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates the Array.
            </summary>
            <returns>An enumerator that iterates the Array.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcArray`2.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcArray`2.ContentElementName">
            <summary>
            The name of Elements of this type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcBase64">
            <summary>
            Represents an XmlRpcType containing a byte array that is formatted as base64 string.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBase64.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcBase64"/> class with a zero-length byte array for the Value property.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBase64.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcBase64"/> class with the given value.
            </summary>
            <param name="value">The data encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBase64.GenerateXml">
            <summary>
            Generates an XElement from the Value. Default implementation creates an XElement with the ElementName and the content from Value.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBase64.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcBase64.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcBoolean">
            <summary>
            Represents an XmlRpcType containing a boolean.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBoolean.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcBoolean"/> class with Value set to the default value for bool.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBoolean.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcBoolean"/> class with the given value.
            </summary>
            <param name="value">The bool encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBoolean.GenerateXml">
            <summary>
            Generates a value-XElement containing the information stored in this XmlRpc type.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcBoolean.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcBoolean.ContentElementName">
            <summary>
            The name of Elements of this type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcDateTime">
            <summary>
            Represents an XmlRpcType containing a DateTime.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDateTime.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcDateTime"/> class with Value set to the defaut value for DateTime.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDateTime.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcDateTime"/> class with the given value.
            </summary>
            <param name="value">The DateTime encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDateTime.GenerateXml">
            <summary>
            Generates a value-XElement containing the information stored in this date time.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDateTime.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcDateTime.ContentElementName">
            <summary>
            The name of Elements of this type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcDouble">
            <summary>
            Represents an XmlRpcType containing a double.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDouble.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcDouble"/> class with Value set to the default value for double.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDouble.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcDouble"/> class with the given value.
            </summary>
            <param name="value">The double encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcDouble.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcDouble.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcI4">
            <summary>
            Represents an XmlRpcType containing an int.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcInt">
            <summary>
            Represents an XmlRpcType containing an int.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcInt.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcInt"/> class with Value set to the default value for int.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcInt.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcInt"/> class with the given value.
            </summary>
            <param name="value">The int encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcInt.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcInt.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcI4.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcI4"/> class with Value set to the default value for int.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcI4.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcI4"/> class with the given value.
            </summary>
            <param name="value">The int encapsulated by this.</param>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcI4.ContentElementName">
            <summary>
            The name of Elements of this type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcString">
            <summary>
            Represents an XmlRpcType containing a string.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcString.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcString"/> class with Value set to an empty string.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcString.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcString"/> class with the given value.
            </summary>
            <param name="value">The string encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcString.hasValueCorrectContent(System.Xml.Linq.XElement)">
            <summary>
            Checks whether the value-XElement has content fitting with this XmlRpc type.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>Whether it has fitting content or not.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcString.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcString.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="T:XmlRpc.Types.XmlRpcStruct`1">
            <summary>
            Represents an XmlRpcType containing a xml rpc struct that is derived from <see cref="T:XmlRpc.Types.Structs.BaseStruct"/>.
            </summary>
            <typeparam name="TXmlRpcStruct">The Type of the struct. Also the Type of the Value property.</typeparam>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcStruct`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcStruct`1"/> class with a new TXmlRpcType.
            </summary>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcStruct`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:XmlRpc.Types.XmlRpcStruct`1"/> class with the given value.
            </summary>
            <param name="value">The struct encapsulated by this.</param>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcStruct`1.GenerateXml">
            <summary>
            Generates a value-XElement capsuling the struct.
            </summary>
            <returns>The generated Xml.</returns>
        </member>
        <member name="M:XmlRpc.Types.XmlRpcStruct`1.parseXml(System.Xml.Linq.XElement)">
            <summary>
            Sets the Value property with the information contained in the value-XElement.
            </summary>
            <param name="xElement">The element containing the information.</param>
            <returns>Whether it was successful or not.</returns>
        </member>
        <member name="P:XmlRpc.Types.XmlRpcStruct`1.ContentElementName">
            <summary>
            The name of value content elements for this XmlRpc type.
            </summary>
        </member>
        <member name="T:XmlRpc.XmlRpcElements">
            <summary>
            Contains constant names for the various elements that make up the XmlRpc messages.
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.ArrayDataElement">
            <summary>
            data
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.ArrayElement">
            <summary>
            array
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.Base64Element">
            <summary>
            base64
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.BooleanElement">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.DateTimeElement">
            <summary>
            dateTime.iso8601
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.DoubleElement">
            <summary>
            double
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.FaultElement">
            <summary>
            fault
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.I4Element">
            <summary>
            i4
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.IntElement">
            <summary>
            int
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.MethodCallElement">
            <summary>
            methodCall
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.MethodNameElement">
            <summary>
            methodName
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.MethodResponseElement">
            <summary>
            methodResponse
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.ParamElement">
            <summary>
            param
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.ParamsElement">
            <summary>
            params
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.StringElement">
            <summary>
            string
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.StructElement">
            <summary>
            struct
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.StructMemberElement">
            <summary>
            member
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.StructMemberNameElement">
            <summary>
            name
            </summary>
        </member>
        <member name="F:XmlRpc.XmlRpcElements.ValueElement">
            <summary>
            value
            </summary>
        </member>
    </members>
</doc>
